* Dlgo

A game of Go implementation in Common Lisp, with a text interface similar to =gnugo=.

#+begin_example
   BLACK (○) has captured 0 stones
   WHITE (●) has captured 0 stones

   A B C D E F G H J K L M N O P Q R S T      Last move: WHITE Q4
19 . . . . . . . . . . . . . . . . . . . 19
18 . . . . . . . . . . . . . . . . . . . 18
17 . . ○ . . . . . . . . . . . . . . . . 17
16 . . . + . . . . . + . . . . . + ● . . 16
15 . . . . . . . . . . . . . . . . . . . 15
14 . . . . . . . . . . . . . . . . . . . 14
13 . . . . . . . . . . . . . . . . . . . 13
12 . . . . . . . . . . . . . . . . . . . 12
11 . . . . . . . . . . . . . . . . . . . 11
10 . . . + . . . . . + . . . . . + . . . 10
 9 . . . . . . . . . . . . . . . . . . .  9
 8 . . . . . . . . . . . . . . . . . . .  8
 7 . . . . . . . . . . . . . . . . . . .  7
 6 . . . . . . . . . . . . . . . . . . .  6
 5 . . . . . . . . . . . . . . . . . . .  5
 4 . . . + . . . . . + . . . . .(●). . .  4
 3 . . . ○ . . . . . . . . . . . . . . .  3
 2 . . . . . . . . . . . . . . . . . . .  2
 1 . . . . . . . . . . . . . . . . . . .  1
   A B C D E F G H J K L M N O P Q R S T

BLACK(5):
#+end_example
(The actual stone colors may appear reversed depending on the light/dark theme.)

** Motivation
This is my first project in Common Lisp. I wanted to learn the language and I love playing Go so doing this was a perfect excuse for studying the book "Deep learning and the game of Go" by Max Pumperla and Kevin Ferguson. The code examples in the book are written in Python so I had to write everything from scratch.

** Installation

- Install Steel Bank Common Lisp and setup QuickLisp. You can get both from https://www.sbcl.org and https://www.quicklisp.org respectively.
- Clone this repo into =~/quicklisp/local-projects=

** Build & Run
*** Human vs. Human or Human vs. Bot
Build binary with
#+begin_example
make build
#+end_example
And run with =./bin/dlgo-cli=

Alternatively
#+begin_example
sbcl
(asdf:load-system :dlgo)
(dlgo.tui:start-game)
#+end_example

An alternative to =asdf:load-system= is to use =(ql:quickload :dlgo)= so all dependencies are installed.
*** Bot vs. Gnu Go
#+begin_example
sbcl
(asdf:load-system :dlgo)
(dlgo.gtp:start-game)
#+end_example
*** Tic Tac Toe
Human vs. Human or Human vs. Minimax Bot (unbeatable)
#+begin_example
sbcl
(asdf:load-system :dlgo/tictactoe)
(dlgo.tictactoe.tui:start-game)
#+end_example
** Testing
To run all tests:
#+begin_example
make test
#+end_example

Alternatively
#+begin_example
sbcl
(adsf:load-system :dlgo/tests)
(in-package :dlgo/tests)
(run-tests)
#+end_example

Instead of =(run-tests)= you can run a single test, i.e.:
#+begin_example
(test-capture-without-liberties)
#+end_example

** Notes
This section centralizes comments for code decisions, to avoid repeating them whenever they occur.
Of particular help when not familiar with Common Lisp, but may seem redundant within the code for the experienced Lisper.

1. I prefer clarity over brevity, thus use =:common-lisp= instead of =:cl=
2. Use of =define-constant= instead of =defconstant= to prevent redefinition warning when recompiling.
3. I would prefer using =?= for predicates instead of the convention of adding =-p= suffix, such as =(point? a1)= instead of =(point-p a1)=, but doing so would add inconsistencies with the autogenerated functions of =defstruct=, that is, when defining =defstruct foo= we also get a =foo-p=.
4. In general I prefer programming in a functional style, where functions don't mutate their arguments. In cases where arguments are mutated, the function name has a =!= suffix.

** TODO Missing features
- Calculate score. (add komi)
- Add time
- Client-server architecture with go text protocol ([[https://www.lysator.liu.se/~gunnar/gtp/gtp2-spec-draft2/gtp2-spec.html#SECTION00030000000000000000][gtp]]).
- Graphical client
- Add feature to load game from =sgf= file.
- SGF editor
- Make a smart bot.

** Additional info
- https://github.com/maxpumperla/deep_learning_and_the_game_of_go
- https://homepages.cwi.nl/~aeb/go/misc/sgf.html
- https://senseis.xmp.net/?SmartGameFormat
- https://speedtesting.herokuapp.com/sgfviewer/
- https://www.red-bean.com/sgf/go.html
- https://www.gnu.org/software/gnugo/gnugo_19.html
